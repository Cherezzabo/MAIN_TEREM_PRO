"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.messages = exports.ruleName = undefined;

exports.default = function (expectation) {
  var checker = (0, _utils.whitespaceChecker)("space", expectation, messages);
  return function (root, result) {
    var validOptions = (0, _utils.validateOptions)(result, ruleName, {
      actual: expectation,
      possible: ["always", "never", "always-single-line", "never-single-line"]
    });
    if (!validOptions) {
      return;
    }

    valueListCommaWhitespaceChecker({
      root: root,
      result: result,
      locationChecker: checker.after,
      checkedRuleName: ruleName
    });
  };
};

exports.valueListCommaWhitespaceChecker = valueListCommaWhitespaceChecker;

var _utils = require("../../utils");

var _styleSearch = require("style-search");

var _styleSearch2 = _interopRequireDefault(_styleSearch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ruleName = exports.ruleName = "value-list-comma-space-after";

var messages = exports.messages = (0, _utils.ruleMessages)(ruleName, {
  expectedAfter: function expectedAfter() {
    return "Нужен пробел после \",\"";
  },
  rejectedAfter: function rejectedAfter() {
    return "Лишний пробел после \",\"";
  },
  expectedAfterSingleLine: function expectedAfterSingleLine() {
    return "Нужен пробел после \",\" в однострочном списке";
  },
  rejectedAfterSingleLine: function rejectedAfterSingleLine() {
    return "Лишний пробел после \",\" в однострочном списке";
  }
});

function valueListCommaWhitespaceChecker(_ref) {
  var locationChecker = _ref.locationChecker;
  var root = _ref.root;
  var result = _ref.result;
  var checkedRuleName = _ref.checkedRuleName;

  root.walkDecls(function (decl) {
    if (!(0, _utils.isStandardSyntaxDeclaration)(decl) || !(0, _utils.isStandardSyntaxProperty)(decl.prop)) {
      return;
    }
    (0, _styleSearch2.default)({
      source: decl.toString(),
      target: ",",
      functionArguments: "skip"
    }, function (match) {
      checkComma(decl.toString(), match.startIndex, decl);
    });
  });

  function checkComma(source, index, node) {
    locationChecker({
      source: source,
      index: index,
      err: function err(m) {
        (0, _utils.report)({
          message: m,
          node: node,
          index: index,
          result: result,
          ruleName: checkedRuleName
        });
      }
    });
  }
}